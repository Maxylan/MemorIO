#-- @Maxylan (c) 2024, Torpssons
#-- "Host Details"
#
#ServerName torpssons.se
ServerAdmin webmaster@torpssons.se
ServerSignature Off
ServerTokens Prod

Listen ${GUARD_PORT}

#
#-- "Home" virtualhost, HTTP.
#
<VirtualHost *:${GUARD_PORT}>
	#
	#-- "Access"
    #
	UserDir disabled root
	#
	#-- "Logging"
	#
	<IfModule log_config_module>
		LogLevel trace2
		#
		# The location and format of the access logfile (Common Logfile Format).
		# If you do not define any access logfiles within a <VirtualHost>
		# container, they will be logged here.  Contrariwise, if you *do*
		# define per-<VirtualHost> access logfiles, transactions will be
		# logged therein and *not* in this file.
		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined

	</IfModule>
	<IfModule setenvif_module>
		# Mark requests from the loop-back interface
		SetEnvIf Remote_Addr "127\.0\.0\.1" dontlog
	</IfModule>

	# Disable TRACE Method
    TraceEnable off

	# Disable Directory Listing
	Options -Indexes

	# Limit Request Size
    LimitRequestBody 10485760

	# Restrict this virtualhost to be accessible via my subnet only.
	# I'll try leaving this open for a bit (2024 / 07 / 05) // Maxy
    # <Location />
    #     Require ip 192.168.1.0/24
    # </Location>

	# Timeout settings
	Timeout 24
	KeepAlive On
	KeepAliveTimeout 4
	MaxKeepAliveRequests 6

	# Request Limits
	<IfModule mod_reqtimeout.c>
		RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500
	</IfModule>

	<FilesMatch "^\.">
		# Deny any and all hidden files.
		Require all denied
	</FilesMatch>
	<FilesMatch "^\..*">
		# Deny any and all hidden files.
		Require all denied
	</FilesMatch>
    <FilesMatch "(^#.*#|\.(bak|config|ini|log|old|swp|tmp)|~)$">
    	# Deny access to configuration files
        Require all denied
    </FilesMatch>

    DocumentRoot /usr/local/apache2/htdocs

	#
	#-- Security Rules / Directives / Policies..
	#
	<Directory "/">
        Options -Indexes
    	Require all denied
	</Directory>
    <Directory /usr/local/apache2/htdocs>
        Options -Indexes +FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>

	# StrictHostCheck OFF

	# X-Frame-Options - Prevent Clickjacking
    Header always set X-Frame-Options "SAMEORIGIN"

    # CORS Allow Origin header
    # Header always set Access-Control-Allow-Origin: 'http://localhost:4200'

    # X-Content-Type-Options - Prevent MIME Sniffing
    Header always set X-Content-Type-Options nosniff

    # Content Security Policy
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: ; object-src 'none'"

	# Referrer Policy
    # Header always set Referrer-Policy "no-referrer"

	# Feature Policy
	Header always set Permissions-Policy "microphone=(), camera=(), payment=(), geolocation=(self), fullscreen=(self)"

    #
    #-- Turn on Rewrite
    #
    RewriteEngine On

    #
    #-- Lookahead for %REMOTE_USER
    #
    RewriteRule ^ - [E=MY_REMOTE_USER:%{LA-U:REMOTE_USER}]
    RequestHeader set User-Agent %{MY_REMOTE_USER}e

	#
	#-- "ProxyPass"
	#
	<Location ${GARDEN_BASE_PATH}>
		ProxyPass "${GARDEN_URL}/browser"
		ProxyPassReverse "${GARDEN_URL}/browser"

        # Stop further processing of RewriteRules
        RewriteRule "^${GARDEN_BASE_PATH}.*" "-" [L,END]
        RewriteEngine Off
        SetHandler None
	</Location>

	<Location ${RECEPTION_BASE_PATH}>
    	Header always set Content-Security-Policy "default-src 'self' ; script-src 'self' 'unsafe-inline' https://stackpath.bootstrapcdn.com/; style-src 'self' 'unsafe-inline' https://stackpath.bootstrapcdn.com/; img-src 'self' data: ; object-src 'none'"
		ProxyPass "${RECEPTION_URL}"
		ProxyPassReverse "${RECEPTION_URL}"

        # Stop further processing of RewriteRules
        RewriteRule "^${RECEPTION_BASE_PATH}.*" "-" [L,END]
        RewriteEngine Off
        SetHandler None
	</Location>

#	<Location ${SECRETARY_BASE_PATH}>
#		ProxyPass "${SECRETARY_URL}"
#		ProxyPassReverse "${SECRETARY_URL}"
#
#        # Stop further processing of RewriteRules
#        RewriteRule "^${SECRETARY_BASE_PATH}.*" "-" [L,END]
#        RewriteEngine Off
#        SetHandler None
#	</Location>

	<Location ${WINDOW_BASE_PATH}>
		ProxyPass "${WINDOW_URL}"
		ProxyPassReverse "${WINDOW_URL}"

        # Stop further processing of RewriteRules
        RewriteRule "^${WINDOW_BASE_PATH}.*" "-" [L,END]
        RewriteEngine Off
        SetHandler None
	</Location>

	# <Location ${GUARD_BASE_PATH}>
    RewriteRule ^/guard(.*) /browser$1 [N=16]

    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d

    RewriteCond %{REQUEST_URI} (/[^.]*|\.)$ [NC]
    RewriteRule (/.*)?$ browser/index.html [L]
	# </Location>
</VirtualHost>
# Available loglevels:
# - trace8, ..., trace1,
# - debug,
# - info,
# - notice,
# - warn,
# - error,
# - crit,
# - alert,
# - emerg.
# It is also possible to configure the loglevel for particular modules.

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#    Translate the client X.509 into a Basic Authorisation.  This means that
#    the standard Auth/DBMAuth methods can be used for access control.  The
#    user name is the `one line' version of the client's X.509 certificate.
#    Note that no password is obtained from the user. Every entry in the user
#    file needs this password: `xxj31ZMTZzkVA'.
#   o ExportCertData:
#    This exports two additional environment variables: SSL_CLIENT_CERT and
#    SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#    server (always existing) and the client (only existing when client
#    authentication is used). This can be used to import the certificates
#    into CGI scripts.
#   o StdEnvVars:
#    This exports the standard SSL/TLS related `SSL_*' environment variables.
#    Per default this exportation is switched off for performance reasons,
#    because the extraction step is an expensive operation and is usually
#    useless for serving static content. So one usually enables the
#    exportation for CGI and SSI requests only.
#   o OptRenegotiate:
#    This enables optimized SSL connection renegotiation handling when SSL
#    directives are used in per-directory context.

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#    This forces an unclean shutdown when the connection is closed, i.e. no
#    SSL close notify alert is send or allowed to received.  This violates
#    the SSL/TLS standard but is needed for some brain-dead browsers. Use
#    this when you receive I/O errors because of the standard approach where
#    mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#    This forces an accurate shutdown when the connection is closed, i.e. a
#    SSL close notify alert is send and mod_ssl waits for the close notify
#    alert of the client. This is 100% SSL/TLS standard compliant, but in
#    practice often causes hanging connections with brain-dead browsers. Use
#    this only for browsers where you know that their SSL implementation
#    works correctly.
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
# BrowserMatch "MSIE [2-6]" \
#	nokeepalive ssl-unclean-shutdown \
#	downgrade-1.0 force-response-1.0
